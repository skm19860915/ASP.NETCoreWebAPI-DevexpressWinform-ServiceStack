// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xperters.entities;

namespace xperters.entities.Migrations
{
    [DbContext(typeof(XpertersContext))]
    [Migration("20200812101757_added milestonerequestpayer object to userpayments")]
    partial class addedmilestonerequestpayerobjecttouserpayments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("xperters.entities.Entities.AccountDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IfscCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SwiftNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountDetails");
                });

            modelBuilder.Entity("xperters.entities.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressState")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressZip")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CardScheme")
                        .HasColumnType("int");

                    b.Property<int>("CardType")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotSupported")
                        .HasColumnType("bit");

                    b.Property<string>("IssuingCardId")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NumberSuffix")
                        .IsRequired()
                        .HasColumnType("char(4)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("xperters.entities.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Web, Mobile & Software Dev",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "IT & Networking",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Data Science & Analytics",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Engineering & Architecture",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Design & Creative",
                            IsActive = true
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Writing",
                            IsActive = true
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Translation",
                            IsActive = true
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Legal",
                            IsActive = true
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Admin Support",
                            IsActive = true
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Customer Service",
                            IsActive = true
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Sales & Marketing",
                            IsActive = true
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Display Advertising",
                            IsActive = true
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "Email & Marketing Automation",
                            IsActive = true
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "Lead Generation",
                            IsActive = true
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "Market & Customer Research",
                            IsActive = true
                        },
                        new
                        {
                            Id = 16,
                            CategoryName = "Marketing Strategy",
                            IsActive = true
                        },
                        new
                        {
                            Id = 17,
                            CategoryName = "Public Relations",
                            IsActive = true
                        },
                        new
                        {
                            Id = 18,
                            CategoryName = "SEM - Search Engine Marketing",
                            IsActive = true
                        },
                        new
                        {
                            Id = 19,
                            CategoryName = "SEO - Search Engine Optimization",
                            IsActive = true
                        },
                        new
                        {
                            Id = 20,
                            CategoryName = "Telemarketing & Telesales",
                            IsActive = true
                        },
                        new
                        {
                            Id = 21,
                            CategoryName = "Other - Sales & Marketing",
                            IsActive = true
                        },
                        new
                        {
                            Id = 22,
                            CategoryName = "Accounting & Consulting",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("xperters.entities.Entities.ContractChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractChatSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MsgType")
                        .HasColumnType("int");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractChatSessionId");

                    b.HasIndex("SenderId");

                    b.ToTable("ContractChatMessages");
                });

            modelBuilder.Entity("xperters.entities.Entities.ContractChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.ToTable("ContractChatSessions");
                });

            modelBuilder.Entity("xperters.entities.Entities.ContractChatSessionUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractChatSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractChatSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("ContractChatSessionUsers");
                });

            modelBuilder.Entity("xperters.entities.Entities.ContractMilestoneFund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FundStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("UserId");

                    b.ToTable("ContractMilestoneFunds");
                });

            modelBuilder.Entity("xperters.entities.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 256,
                            CountryName = "Uganda",
                            IsActive = true
                        },
                        new
                        {
                            Id = 1,
                            CountryName = "United States",
                            IsActive = true
                        },
                        new
                        {
                            Id = 44,
                            CountryName = "United Kingdom",
                            IsActive = true
                        },
                        new
                        {
                            Id = 91,
                            CountryName = "India",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("xperters.entities.Entities.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            CurrencyId = 1,
                            CurrencyCode = "USD"
                        });
                });

            modelBuilder.Entity("xperters.entities.Entities.EmailAttachments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EmailAuditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAuditId");

                    b.ToTable("EmailAttachments");
                });

            modelBuilder.Entity("xperters.entities.Entities.EmailAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiverEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("EmailAudits");
                });

            modelBuilder.Entity("xperters.entities.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClientHistory")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("EstimatedBudgetId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("int");

                    b.Property<int>("FreelancerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FreelancersStrength")
                        .HasColumnType("int");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<int>("JobDuration")
                        .HasColumnType("int");

                    b.Property<decimal>("JobPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("JobStatusId")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<int>("JobVisibility")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedJobCategory")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("xperters.entities.Entities.JobAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobAttachments");
                });

            modelBuilder.Entity("xperters.entities.Entities.JobBid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BidStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FreelancerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerUserId");

                    b.HasIndex("JobId");

                    b.ToTable("JobBids");
                });

            modelBuilder.Entity("xperters.entities.Entities.JobBidAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("JobBidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("JobBidId");

                    b.ToTable("JobBidAttachments");
                });

            modelBuilder.Entity("xperters.entities.Entities.JobBidChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("JobBidChatSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobBidChatSessionId");

                    b.HasIndex("SenderId");

                    b.ToTable("JobBidChatMessages");
                });

            modelBuilder.Entity("xperters.entities.Entities.JobBidChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.ToTable("JobBidChatSessions");
                });

            modelBuilder.Entity("xperters.entities.Entities.JobBidChatSessionUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("JobBidChatSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobBidChatSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("JobBidChatSessionUsers");
                });

            modelBuilder.Entity("xperters.entities.Entities.JobContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContractStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.ToTable("JobContracts");
                });

            modelBuilder.Entity("xperters.entities.Entities.JobStatus", b =>
                {
                    b.Property<int>("JobStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JobStatusId");

                    b.ToTable("JobStatus");

                    b.HasData(
                        new
                        {
                            JobStatusId = 1,
                            IsActive = true,
                            Status = "Job Posted"
                        },
                        new
                        {
                            JobStatusId = 2,
                            IsActive = true,
                            Status = "ContractSigned"
                        },
                        new
                        {
                            JobStatusId = 3,
                            IsActive = true,
                            Status = "Job In-Progress"
                        },
                        new
                        {
                            JobStatusId = 4,
                            IsActive = true,
                            Status = "Job Completed"
                        },
                        new
                        {
                            JobStatusId = 5,
                            IsActive = true,
                            Status = "Job Canceled"
                        });
                });

            modelBuilder.Entity("xperters.entities.Entities.Milestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MilestoneDescription")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MilestoneStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatedId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("xperters.entities.Entities.MilestoneAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneId");

                    b.ToTable("MilestoneAttachments");
                });

            modelBuilder.Entity("xperters.entities.Entities.MilestoneMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedId");

                    b.HasIndex("MilestoneId");

                    b.ToTable("MilestoneMessage");
                });

            modelBuilder.Entity("xperters.entities.Entities.MilestoneRequestPayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPaymentServiceStatusCheck")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PayerStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentServiceCheckCount")
                        .HasColumnType("int");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("PayerStatusId");

                    b.ToTable("MilestoneRequestPayers");
                });

            modelBuilder.Entity("xperters.entities.Entities.MilestoneStatus", b =>
                {
                    b.Property<int>("MilestoneStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MilestoneStatusId");

                    b.ToTable("MilestoneStatus");

                    b.HasData(
                        new
                        {
                            MilestoneStatusId = 1,
                            IsActive = true,
                            StatusDescription = "Add Funds"
                        },
                        new
                        {
                            MilestoneStatusId = 2,
                            IsActive = true,
                            StatusDescription = "Active"
                        },
                        new
                        {
                            MilestoneStatusId = 3,
                            IsActive = true,
                            StatusDescription = "Milestone completed. Waiting For client approval"
                        },
                        new
                        {
                            MilestoneStatusId = 4,
                            IsActive = true,
                            StatusDescription = "Admin approved. Milestone funds paid to freelancer wallet"
                        },
                        new
                        {
                            MilestoneStatusId = 5,
                            IsActive = true,
                            StatusDescription = "Paid after freelancer withdrawal"
                        },
                        new
                        {
                            MilestoneStatusId = 6,
                            IsActive = true,
                            StatusDescription = "Milestone cancelled by client. Pending refund"
                        },
                        new
                        {
                            MilestoneStatusId = 7,
                            IsActive = true,
                            StatusDescription = "Payment rejected"
                        },
                        new
                        {
                            MilestoneStatusId = 8,
                            IsActive = true,
                            StatusDescription = "Client approved. Awaiting admin review"
                        },
                        new
                        {
                            MilestoneStatusId = 9,
                            IsActive = true,
                            StatusDescription = "Freelancer withdrawal"
                        },
                        new
                        {
                            MilestoneStatusId = 10,
                            IsActive = true,
                            StatusDescription = "Milestone cancelled by freelancer. Pending refund"
                        },
                        new
                        {
                            MilestoneStatusId = 11,
                            IsActive = true,
                            StatusDescription = "Client refunded"
                        });
                });

            modelBuilder.Entity("xperters.entities.Entities.MilestoneSystemRequestPayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PayerStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentServiceCheckCount")
                        .HasColumnType("int");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("PayerStatusId");

                    b.ToTable("MilestoneSystemRequestPayers");
                });

            modelBuilder.Entity("xperters.entities.Entities.RequestPayerStatus", b =>
                {
                    b.Property<int>("PayerStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PayerStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PayerStatusId");

                    b.ToTable("RequestPayerStatus");

                    b.HasData(
                        new
                        {
                            PayerStatusId = 1,
                            IsActive = true,
                            PayerStatus = "Successful"
                        },
                        new
                        {
                            PayerStatusId = 2,
                            IsActive = true,
                            PayerStatus = "Pending"
                        },
                        new
                        {
                            PayerStatusId = 3,
                            IsActive = true,
                            PayerStatus = "Cancelled"
                        },
                        new
                        {
                            PayerStatusId = 4,
                            IsActive = true,
                            PayerStatus = "Failed"
                        });
                });

            modelBuilder.Entity("xperters.entities.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            SkillName = "C++"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            SkillName = "C#"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            SkillName = "OOPS"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            SkillName = "AngularJs"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            SkillName = "Javascript"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            SkillName = "JQuery"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            SkillName = "MongoDB"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            SkillName = "SQL Server"
                        });
                });

            modelBuilder.Entity("xperters.entities.Entities.SystemBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("SystemPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SystemBalances");
                });

            modelBuilder.Entity("xperters.entities.Entities.SystemPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MilestoneRequestPayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MilestoneSystemRequestPayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneRequestPayerId");

                    b.HasIndex("MilestoneSystemRequestPayerId");

                    b.HasIndex("ToUserId");

                    b.ToTable("SystemPayments");
                });

            modelBuilder.Entity("xperters.entities.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("UserRole")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("xperters.entities.Entities.UserBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPaymentId");

                    b.ToTable("UserBalances");
                });

            modelBuilder.Entity("xperters.entities.Entities.UserPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MilestoneRequestPayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MilestoneSystemRequestPayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("MilestoneRequestPayerId");

                    b.HasIndex("ToUserId");

                    b.ToTable("UserPayments");
                });

            modelBuilder.Entity("xperters.entities.Entities.AccountDetail", b =>
                {
                    b.HasOne("xperters.entities.Entities.User", "User")
                        .WithMany("AccountDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.Card", b =>
                {
                    b.HasOne("xperters.entities.Entities.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.ContractChatMessage", b =>
                {
                    b.HasOne("xperters.entities.Entities.ContractChatSession", "ContractChatSession")
                        .WithMany("ContractChatMessages")
                        .HasForeignKey("ContractChatSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.User", "SenderUser")
                        .WithMany("ContractChatMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.ContractChatSession", b =>
                {
                    b.HasOne("xperters.entities.Entities.User", "Client")
                        .WithMany("ContractChatSessionClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.User", "Freelancer")
                        .WithMany("ContractChatSessionsFreelancers")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.Job", "Job")
                        .WithMany("ContractChatSessions")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.ContractChatSessionUser", b =>
                {
                    b.HasOne("xperters.entities.Entities.ContractChatSession", "ContractChatSession")
                        .WithMany("ContractChatSessionUsers")
                        .HasForeignKey("ContractChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.User", "User")
                        .WithMany("ContractChatSessionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.ContractMilestoneFund", b =>
                {
                    b.HasOne("xperters.entities.Entities.Milestone", "Milestone")
                        .WithMany("ContractFunds")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.User", "User")
                        .WithMany("ContractFunds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.EmailAttachments", b =>
                {
                    b.HasOne("xperters.entities.Entities.EmailAudit", "EmailsAudit")
                        .WithMany("EmailAttachments")
                        .HasForeignKey("EmailAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.EmailAudit", b =>
                {
                    b.HasOne("xperters.entities.Entities.User", "User")
                        .WithMany("EmailAudits")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.Job", b =>
                {
                    b.HasOne("xperters.entities.Entities.JobStatus", "JobStatus")
                        .WithMany("Jobs")
                        .HasForeignKey("JobStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.JobAttachment", b =>
                {
                    b.HasOne("xperters.entities.Entities.Job", "Job")
                        .WithMany("JobAttachments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.JobBid", b =>
                {
                    b.HasOne("xperters.entities.Entities.User", "FreelancerUser")
                        .WithMany("JobBids")
                        .HasForeignKey("FreelancerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.Job", "Job")
                        .WithMany("JobBids")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.JobBidAttachment", b =>
                {
                    b.HasOne("xperters.entities.Entities.JobBid", "JobBid")
                        .WithMany("JobBidAttachments")
                        .HasForeignKey("JobBidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.JobBidChatMessage", b =>
                {
                    b.HasOne("xperters.entities.Entities.JobBidChatSession", "JobBidChatSession")
                        .WithMany("JobBidChatMessages")
                        .HasForeignKey("JobBidChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.JobBidChatSession", b =>
                {
                    b.HasOne("xperters.entities.Entities.User", "Client")
                        .WithMany("JobBidChatSessionClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.User", "Freelancer")
                        .WithMany("JobBidChatSessionsFreelancers")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.Job", "Job")
                        .WithMany("JobBidChatSessions")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.JobBidChatSessionUser", b =>
                {
                    b.HasOne("xperters.entities.Entities.JobBidChatSession", "JobBidChatSession")
                        .WithMany("JobBidChatSessionUsers")
                        .HasForeignKey("JobBidChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.User", "User")
                        .WithMany("JobBidChatSessionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.JobContract", b =>
                {
                    b.HasOne("xperters.entities.Entities.User", "Freelancer")
                        .WithMany("JobContracts")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.Milestone", b =>
                {
                    b.HasOne("xperters.entities.Entities.JobContract", "Contract")
                        .WithMany("Milestones")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.User", "CreatedBy")
                        .WithMany("Milestones")
                        .HasForeignKey("CreatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.MilestoneAttachment", b =>
                {
                    b.HasOne("xperters.entities.Entities.Milestone", "Milestone")
                        .WithMany("MilestoneAttachments")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.MilestoneMessage", b =>
                {
                    b.HasOne("xperters.entities.Entities.User", "Created")
                        .WithMany()
                        .HasForeignKey("CreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.Milestone", "Milestone")
                        .WithMany("MilestoneMessages")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.MilestoneRequestPayer", b =>
                {
                    b.HasOne("xperters.entities.Entities.Milestone", "Milestone")
                        .WithMany("MilestoneRequestPayers")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.RequestPayerStatus", "PayerStatus")
                        .WithMany("MilestoneRequestPayers")
                        .HasForeignKey("PayerStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.MilestoneSystemRequestPayer", b =>
                {
                    b.HasOne("xperters.entities.Entities.Milestone", "Milestone")
                        .WithMany("MilestoneSystemRequestPayers")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.RequestPayerStatus", "PayerStatus")
                        .WithMany()
                        .HasForeignKey("PayerStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.User", b =>
                {
                    b.HasOne("xperters.entities.Entities.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.UserBalance", b =>
                {
                    b.HasOne("xperters.entities.Entities.User", "User")
                        .WithMany("UserBalances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.UserPayment", "UserPayment")
                        .WithMany("UserBalances")
                        .HasForeignKey("UserPaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("xperters.entities.Entities.UserPayment", b =>
                {
                    b.HasOne("xperters.entities.Entities.User", "FromUser")
                        .WithMany("UserPayments")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.MilestoneRequestPayer", "MilestoneRequestPayer")
                        .WithMany()
                        .HasForeignKey("MilestoneRequestPayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xperters.entities.Entities.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
